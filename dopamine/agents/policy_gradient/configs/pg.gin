# Hyperparameters follow the classic Nature DQN, but we modify as necessary to
# match those used in Rainbow (Hessel et al., 2018), to ensure apples-to-apples
# comparison.
import dopamine.ctrl.run_experiment
import dopamine.agents.policy_gradient.policy_gradient
import dopamine.replay_memory.circular_replay_buffer
import gin.tf.external_configurables

PGAgent.gamma = 0.99
PGAgent.update_horizon = 1
PGAgent.min_replay_history = 1600  # agent steps
PGAgent.update_period = 4
PGAgent.target_update_period = 1600  # agent steps
PGAgent.epsilon_train = 0.01
PGAgent.epsilon_eval = 0.001
PGAgent.epsilon_decay_period = 250000  # agent steps
PGAgent.tf_device = '/gpu:0'  # use '/cpu:*' for non-GPU version
PGAgent.optimizer = @tf.train.RMSPropOptimizer()

tf.train.RMSPropOptimizer.learning_rate = 0.00025
tf.train.RMSPropOptimizer.decay = 0.95
tf.train.RMSPropOptimizer.momentum = 0.0
tf.train.RMSPropOptimizer.epsilon = 0.00001
tf.train.RMSPropOptimizer.centered = True

Runner.game_name = 'Pong'
# Sticky actions with probability 0.25, as suggested by (Machado et al., 2017).
Runner.sticky_actions = True
Runner.num_iterations = 500
Runner.training_steps = 1600  # agent steps
Runner.evaluation_steps = 1250  # agent steps
Runner.max_steps_per_episode = 27000  # agent steps

dopamine.replay_memory.circular_replay_buffer.WrappedReplayBuffer.replay_capacity = 1000000
dopamine.replay_memory.circular_replay_buffer.WrappedReplayBuffer.batch_size = 1600
